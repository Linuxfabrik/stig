- ansible.builtin.debug:
    msg:
      - 'ipv6-off.yml'

# https://access.redhat.com/solutions/8709#rhel8disable

- name: 'get the contents of /etc/default/grub'
  ansible.builtin.slurp:
    src: '/etc/default/grub'
  register: 'etc_default_grub'

- name: 'adjust GRUB_CMDLINE_LINUX in /etc/default/grub'
  ansible.builtin.lineinfile:
    path: '/etc/default/grub'
    regexp: '^GRUB_CMDLINE_LINUX'
    # b64decode: needed because of the slurp module
    # regex_search('^GRUB_CMDLINE_LINUX.*$', multiline=true): get the GRUB_CMDLINE_LINUX
    # regex_replace('(^GRUB_CMDLINE_LINUX\s*=\s*|\")', '')).split(' '): remove the GRUB_CMDLINE_LINUX= and all quotes and split by spaces. this leaves all the options as a list
    # map('regex_replace', '^ipv6.disable=.*$', ''): remove the ipv6.disable option from the list
    # list: needed to make a list out of the generator again
    # union(['ipv6.disable=1']): add the ipv6.disable option back with the wanted value
    # select(): remove all empty elements. this prevents multiple whitespaces in the final GRUB_CMDLINE_LINUX
    # join(' '): join the modified options using a space
    line: >
      GRUB_CMDLINE_LINUX="{{
      (etc_default_grub['content']
      | b64decode
      | regex_search('^GRUB_CMDLINE_LINUX.*$', multiline=true)
      | regex_replace('(^GRUB_CMDLINE_LINUX\s*=\s*|\")', '')).split(' ')
      | map('regex_replace', '^ipv6\.disable=.*$', '')
      | list
      | union(['ipv6.disable=1'])
      | select()
      | join(' ')
      }}"
  notify:
    - 'stig: grub2-mkconfig EFI'
    - 'stig: grub2-mkconfig BIOS'
# this task is inspired by OpenSCAP

- ansible.builtin.lineinfile:
    path: '/etc/modprobe.d/ipv6.conf'
    create: true
    regexp: '^options\s+ipv6\s+disable=\d'
    line: 'options ipv6 disable=1'

- ansible.posix.sysctl:
    name: '{{ item }}'
    value: '1'
    sysctl_set: true
    state: 'present'
    reload: true
    ignoreerrors: true
  with_items:
    - 'net.ipv6.conf.all.disable_ipv6'
    - 'net.ipv6.conf.default.disable_ipv6'
  # throws an error if ipv6 is already disabled, so just go on
  ignore_errors: true

# set the new state for the later tasks
- ansible.builtin.set_fact:
    ipv6_disabled: true
    ipv6_enabled: false
